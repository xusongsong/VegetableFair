<!DOCTYPE html>
<html>
  <head>
    <title>加载球面</title>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=8" />
  	<script src="mapBase/Class.js"></script>
    <script src="mapBase/Util.js"></script>
    <script src="mapBase/Map3D.js"></script>
    <script type="text/javascript">
	
	/** 初始化 */
    var map3D;
	var SDKevent;
    function init(){
        map3D = new CooMap.Map3D({
            id:"map",          //加载三维地图容器的id
            width:"100%",
            height:"900px"
        });
        map3D.getLicence("192.168.10.34@9059@");//网络授权
		SDKevent = map3D.sdkEvent();//注册事件
      }
	  
	var cpmLayer;
    /** 加载网络模型数据 */
	function loadWrl(){
		cpmLayer = map3D.loadCPM("F:\\kelan\\HaiKang_unCompressed\\Out1\\Lod1\\sceneName.L000_000.wrl");		
		map3D.flyPosition(120.2161886949898,30.21208647541144,63.70232508983463,4.351113551310101,-0.6722756375833641,528.9511815746299,3);//飞行定位
	}
	
    /** 删除模型数据 */
    function removeCPM() {
        map3D.removelayer(cpmLayer); ////删除模型数据
    }
	
	
	/** 漫游模式 */
	function roamMode(type){
		if(type =="onWalk"){
			map3D.createRoamMode("OnWalk");
		}else if(type =="onDrive"){
			map3D.createRoamMode("OnDrive");
		}else if(type =="onFly"){
			map3D.createRoamMode("OnFly");
		}else if(type =="clearRoamMode"){
			map3D.destroyRoamMode();
		}
	}
	
	
	
	/** 视角功能 */
		function view(viewType){
		var navagation = map.CreateRoam();
		var resp = map.CreateResponserOptions("UICompassResponser");
        resp.AddConfig("Visible", "true");/////设置罗盘响应器显隐状态。特别注意，罗盘响应器因为内部的关系，已经默认创建，外部需要通过更新配置接口设置显隐状态，而不是通过添加的方式
        var resCompass = map.CreateResponser("UICompassResponser", resp); /////创建罗盘响应器，必须为UICompassResponser
        resCompass.UpdateResponserOptions(resp); /////更新罗盘响应器配置，这里必须这么处理
		///设置视图旋转模式
        ///参数1：是否绕视点旋转：true，按视点；false，按目标点
        ///参数2：目的俯仰角设置（绝对值）；范围-89到0，单位角度。当为0时，为默认取当前俯仰角，不进行垂直转动
        ///参数3：旋转角设置（相对值）：范围-180到180，单位角度，绕视点时，向左为负，向右为正；绕目标点时，向右为负，向左为正。为0时不进行水平转动
        ///参数4：转动时间，单位毫秒，范围1-无穷大。不可取0
		switch (viewType) {
			case 0: //正北
				 navagation.SetViewRotateRoamMode(false, 0, 0, 1500); ///绕目标点，进行旋转
				break;
			case 1: //东北
				navagation.SetViewRotateRoamMode(false, 0, 45, 1500); ///绕目标点，进行旋转
				break;
			case 2: //正东
				navagation.SetViewRotateRoamMode(false, 0, 90, 1500); ///绕目标点，进行旋转
				break;
			case 3: //东南
				navagation.SetViewRotateRoamMode(false, 0, 135, 1500); ///绕目标点，进行旋转
				break;
			case 4: //正南
				navagation.SetViewRotateRoamMode(false, 0, -180, 1500); ///绕目标点，进行旋转
				break;
			case 5: //西南
				navagation.SetViewRotateRoamMode(false, 0, -135, 1500); ///绕目标点，进行旋转
				break;	
			case 6: //正西
				navagation.SetViewRotateRoamMode(false, 0, -90, 1500); ///绕目标点，进行旋转
				break;
			case 7: //西北
				navagation.SetViewRotateRoamMode(false, 0, -45, 1500); ///绕目标点，进行旋转
				break;	
			default:
				break;
		}
	}
	

	/** 测量功能 */
	var verticalLayers = horizontalLayers = distanceLayers = areaLayers = surfaceAreaLayers =[];
	function measure(id){
	switch(id){
	case 0:
		delMeasure();
		break;	
	//水平测量
	 case 1:
		var measure = map3D.addSphereMeasure(1);
		horizontalLayers.push(measure);
		break;
	//垂直测量
	case 2:
		var measure = map3D.addSphereMeasure(2);
		verticalLayers.push(measure);
		break;
	//距离测量 
	case 3:
		var measure = map3D.addSphereMeasure(3);
		distanceLayers.push(measure);
		break;
	//面积测量
	case 4:
		var measure = map3D.addSphereMeasure(4);
		areaLayers.push(measure);
		break;
	case 5:
		var measure = map3D.addSphereMeasure(5);
		surfaceAreaLayers.push(measure);
		break;
	default:
		break;
	}
	
	//清除测量
	function delMeasure() {
			if(verticalLayers != null || verticalLayers != undefined) {
        for(var i = 0 ; i<verticalLayers.length ; i++){
          map3D.removelayer(verticalLayers[i]);
        }		
			}
			if(horizontalLayers != null || horizontalLayers != undefined) {
         for(var i = 0 ; i<horizontalLayers.length ; i++){
          map3D.removelayer(horizontalLayers[i]);
        } 
			}
			if(distanceLayers != null || distanceLayers != undefined) {
         for(var i = 0 ; i<distanceLayers.length ; i++){
          map3D.removelayer(distanceLayers[i]);
        } 	
			}
      if(areaLayers != null || areaLayers != undefined) {
         for(var i = 0 ; i<areaLayers.length ; i++){
          map3D.removelayer(areaLayers[i]);
        }   
      }
	  if(surfaceAreaLayers != null || surfaceAreaLayers != undefined) {
         for(var i = 0 ; i<surfaceAreaLayers.length ; i++){
          map3D.removelayer(surfaceAreaLayers[i]);
        }   
      }
		}
};

	/** 测量功能
	var verticalLayer = horizontalLayer = distanceLayer = areaLayer = surfaceAreaLayer =[];
    function horizontalMeasure() {//水平
	   var measure = map3D.addSphereMeasure(1);
       horizontalLayer.push(measure);
		}
	function verticalMeasure() {//垂直
	  var measure = map3D.addSphereMeasure(2);

      verticalLayer.push(measure);
		}
	function distanceMeasure() {//距离
	   var measure = map3D.addSphereMeasure(3);
       var tt = measure.GetLayerResult().GetConfigValueByKey("");
      distanceLayer.push(measure);
		}
    function areaMeasure(){//面积测量
      var measure = map3D.addSphereMeasure(4);
      areaLayer.push(measure);
    }
	function surfaceAreaMeasure(){//表面积测量
	   var  surfaceAreaMeasure = map3D.addSphereMeasure(5);
	    surfaceAreaLayer.push(surfaceAreaMeasure);
	    }
		
		// 删除测量 
	function delMeasure() {
			if(verticalLayer != null || verticalLayer != undefined) {
        for(var i = 0 ; i<verticalLayer.length ; i++){
          map3D.removelayer(verticalLayer[i]);
        }		
			}
			if(horizontalLayer != null || horizontalLayer != undefined) {
         for(var i = 0 ; i<horizontalLayer.length ; i++){
          map3D.removelayer(horizontalLayer[i]);
        } 
			}
			if(distanceLayer != null || distanceLayer != undefined) {
         for(var i = 0 ; i<distanceLayer.length ; i++){
          map3D.removelayer(distanceLayer[i]);
        } 	
			}
      if(areaLayer != null || areaLayer != undefined) {
         for(var i = 0 ; i<areaLayer.length ; i++){
          map3D.removelayer(areaLayer[i]);
        }   
      }
	  if(surfaceAreaLayer != null || surfaceAreaLayer != undefined) {
         for(var i = 0 ; i<surfaceAreaLayer.length ; i++){
          map3D.removelayer(surfaceAreaLayer[i]);
        }   
      }
		}*/
		
		/** 特效 */
	var fireLayer = new Array();
	var fountainLayer = new Array();
	var hydraulicGiantLayer = new Array();
    var pointList = new Array();
    
		/** 火焰特效*/
    function addFire(){
          SDKevent.attachEvent("FireOnLButtonUp",getXYZ1);
      }
    function getXYZ1(x,y){
      var tmpLayer = map3D.createFire({
                  screenX:x,
                  screenY:y
              });
          fireLayer.unshift(tmpLayer);
          SDKevent.detachEvent("FireOnLButtonUp",getXYZ1);
      }
      function removeFire(){
          while(fireLayer.length > 0){
              map3D.removelayer(fireLayer.pop());
          }
      }
	  
	  /** 喷泉特效*/
	  function addFountain(){
          SDKevent.attachEvent("FireOnLButtonUp",getXYZ2);
      }
      function getXYZ2(x,y){
          var tmpLayer = map3D.createFountain({
                  screenX:x,
                  screenY:y
              });
          fountainLayer.unshift(tmpLayer);
          SDKevent.detachEvent("FireOnLButtonUp",getXYZ2);
      }
      function removeFountain(){
          while(fountainLayer.length > 0){
              map3D.removelayer(fountainLayer.pop());
          }
      }
	  /** 水枪特效 */
	  function addHydraulicGiant(){
          SDKevent.attachEvent("FireOnLButtonUp",getXYZ3);
      }
      function getXYZ3(x,y){
          var point = map3D.coordTransformation(3,{screenX:x,screenY:y});
          pointList.unshift(point);
          if(pointList.length == 2){
              var start = pointList.pop().split(",");
              var end = pointList.pop().split(",");
              var tmpLayer = map3D.createHydraulicGiant({
                  startPointLon:start[0],
                  startPointLat:start[1],
                  startPointHeight:start[2],
                  endPointLon:end[0],
                  endPointLat:end[1],
                  endPointHeight:end[2]
              });
              hydraulicGiantLayer.unshift(tmpLayer);
              SDKevent.detachEvent("FireOnLButtonUp",getXYZ3);
          }
      } 
	  function removeHydraulicGiant(){
          while(hydraulicGiantLayer.length > 0){
              map3D.removelayer(hydraulicGiantLayer.pop());
          }
      }
	  
	  /** 雾效 */
      function fog(){
          map3D.setFog({
              fogStatus:true,
              fogColor:"0.9,0.8,0.3",
              fogDensity:"0.5"
        });
      }
	  //清除雾效
	   function clearFog(){
          map3D.setFog({
              fogStatus:false,
			  fogColor:"0.9,0.8,0.3",
              fogDensity:"0.5"
        });
      }
  

		</script>
  </head>
  
  <body onload="init();">
	<button onclick="loadWrl()">加载模型</button>
	<button onclick="removeCPM()">移除模型</button>
	
	<input type="button" value="步行" onclick="roamMode('onWalk')"/>
	<input type="button" value="车行" onclick="roamMode('onDrive')"/>
	<input type="button" value="飞行" onclick="roamMode('onFly')"/>
	<input type="button" value="清除" onclick="roamMode('clearRoamMode')"/>


	<input type="button" value="视角0" onclick="view(0)"/>
	<input type="button" value="视角1" onclick="view(1)"/>
	<input type="button" value="视角2" onclick="view(2)"/>
	<input type="button" value="视角3" onclick="view(3)"/>
	<input type="button" value="视角4" onclick="view(4)"/>
	<input type="button" value="视角5" onclick="view(5)"/>
	<input type="button" value="视角6" onclick="view(6)"/>
	<input type="button" value="视角7" onclick="view(7)"/>
	
	<input type="button" value="水平" onclick="measure(1)"/> 
	<input type="button" value="垂直" onclick="measure(2)"/> 
	<input type="button" value="距离" onclick="measure(3)"/> 
	<input type="button" value="面积" onclick="measure(4)"/> 
	<input type="button" value="表面积" onclick="measure(5)"/> 
	<input type="button" value="删除" onclick="measure(0)"/> 
	
	<button onclick="fog()">添加雾</button>
	<button onclick="clearFog()">删除雾</button>
	<button onclick="addFire()">添加火焰</button>
	<button onclick="removeFire()">删除火焰</button>
	<button onclick="addFountain()">添加喷泉</button>
	<button onclick="removeFountain()">删除喷泉</button>
	<button onclick="addHydraulicGiant()">添加水枪</button>
	<button onclick="removeHydraulicGiant()">删除水枪</button>
	
	
	  
	  
	
	<object id="VPSDKCtrl" classid="CLSID:A1F1748A-2B6E-4616-954D-3F39B11DF57D" style="width: 100%; height: 980px">
	</object>
  </body>
</html>
